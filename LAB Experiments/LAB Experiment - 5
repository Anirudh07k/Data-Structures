#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>
int precedence(char opr)
{
    switch(opr)
    {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return -1;
    }
}
char* InfixtoPostfix(char *exp)
{
    int size = strlen(exp), top = -1,index = 0;
    char operator[size];
    char* str = (char*)malloc(size+1);
    for(int i=0;i<size;i++)
    {
        char ch = exp[i];
        if(isdigit(ch) || isalpha(ch))
            str[index++] = ch;
        else if(ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='^')
        {
            if(top == -1)
                operator[++top] = ch;
            else
            {
                while(top!=-1 && precedence(ch)<=precedence(operator[top]))
                {
                    str[index++] = operator[top--];
                }
                operator[++top] = ch;
            }
        }
        else if(ch=='(')
            operator[++top]=ch;
        else if(ch==')')
            {
                while(operator[top] != '(')
                {
                    str[index++] = operator[top--];  
                }
                top--;
            }
    }
    while(top != -1)
    {
        str[index++] = operator[top--];
    }
    str[index] = '\0';
    return str;
}
char* InfixtoPrefix(char *exp)
{
    int size = strlen(exp), top = -1,index = 0;
    char operator[size];
    char* str = (char*)malloc(size+2);
    for(int i=size-1;i>=0;i--)
    {
        char ch = exp[i];
        if(isdigit(ch) || isalpha(ch))
            str[index++] = ch;
        else if(ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='^')
        {
            if(top == -1)
                operator[++top] = ch;
            else
            {
                while(top!=-1 && precedence(ch)<=precedence(operator[top]))
                {
                    str[index++] = operator[top--];
                }
                operator[++top] = ch;
            }
        }
        else if(ch==')')
            operator[++top]=ch;
        else if(ch=='(')
            {
                while(operator[top] != ')')
                {
                    str[index++] = operator[top--];  
                }
                top--;
            }
    }
    while(top != -1)
    {
        str[index++] = operator[top--];
    }
    str[index] = '\0';
    return strrev(str);
}
int main()
{
    char exp[100];
    printf("Enter an Infix Expression : ");
    gets(exp);
    printf("Postfix form of Infix Expression %s is %s\n",exp,InfixtoPostfix(exp));
    printf("Prefix form of Infix Expression %s is %s",exp,InfixtoPrefix(exp));
    return 0;
}
